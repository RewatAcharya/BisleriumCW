@using System.Security.Claims
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"] - Bislerium.WebApp</title>
    <link rel="stylesheet" href="~/lib/bootstrap/dist/css/bootstrap.min.css" />
    <link rel="stylesheet" href="~/css/site.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/Bislerium.WebApp.styles.css" asp-append-version="true" />
    <link rel="stylesheet" href="//cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/css/toastr.css" />
    <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.7.0/font/bootstrap-icons.css" rel="stylesheet">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/wow/1.1.2/wow.min.js"></script>


</head>
<body>
    <partial name="_Notification" />
    <header>

        <nav id="navbar" class="navbar navbar-expand-sm navbar-light bg-transparent border-bottom box-shadow mb-3">
            <div class="container">
                <a class="navbar-brand" asp-area="" asp-controller="Blog" asp-action="Index">
                    <span style="color: #ff6b6b;">Bislerium</span>
                </a>
                <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarSupportedContent"
                        aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
                    <span class="navbar-toggler-icon"></span>
                </button>
                <div class="collapse navbar-collapse" id="navbarSupportedContent">
                    <ul class="navbar-nav ms-auto mb-2 mb-sm-0">
                        <li class="nav-item">
                            <a class="nav-link text-dark" asp-area="" asp-controller="Blog" asp-action="Index">Blog</a>
                        </li>
                        @if (User.Identity.IsAuthenticated)
                        {
                            <input type="hidden" id="userId" value="@User.FindFirstValue(ClaimTypes.NameIdentifier)">

                            var nameIdentifier = User.FindFirstValue(ClaimTypes.NameIdentifier);

                            if (nameIdentifier != null)
                            {
                                <li class="nav-item">
                                    <a class="nav-link text-dark" asp-action="Create" asp-controller="Blog">New Blog</a>
                                </li>
                                <li class="nav-item">
                                    <a class="nav-link text-dark" asp-action="Index" asp-controller="Profile" asp-route-Id="@User.FindFirstValue(ClaimTypes.NameIdentifier).ToString()">Profile</a>
                                </li>
                                <li>
                                    <span class="badge notification-count" id="notificationCount" data-toggle="popover" title="Notifications"></span>
                                </li>
                                @if (User.IsInRole("Admin"))
                                {
                                    <li class="nav-item">
                                        <a class="nav-link text-dark" asp-area="" asp-controller="Dashboard" asp-action="Index">Dashboard</a>
                                    </li>
                                }
                                <li class="nav-item">
                                    <a class="nav-link text-dark" asp-area="" asp-controller="Account" asp-action="Logout">Logout</a>
                                </li>
                            }
                            else
                            {
                                <p>You are authenticated, but the NameIdentifier claim is missing.</p>
                            }
                        }
                        else
                        {
                            <li class="nav-item">
                                <a class="nav-link text-dark" asp-area="" asp-controller="Account" asp-action="Login">Login</a>
                            </li>
                        }

                    </ul>
                </div>
            </div>
        </nav>
    </header>
    <div class="container">
        <main role="main" class="pb-3">
            @RenderBody()
        </main>
    </div>

    <footer class="border-top footer text-muted text-center">
        <div class="container">
            &copy; 2024 - Bislerium
        </div>
    </footer>
    <script src="~/lib/jquery/dist/jquery.min.js"></script>
    <script src="~/lib/bootstrap/dist/js/bootstrap.bundle.min.js"></script>
    <script src="~/js/site.js" asp-append-version="true"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery-ajax-unobtrusive/3.2.6/jquery.unobtrusive-ajax.min.js"></script>
    <script>
        // Initialize WOW.js
        new WOW().init();
    </script>

    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://www.gstatic.com/firebasejs/6.4.2/firebase-app.js" type="text/javascript"></script>
    <script src="https://www.gstatic.com/firebasejs/6.4.2/firebase-messaging.js" type="text/javascript"></script>

    <script type="module">
        $(function () {
            var token = null;

            const firebaseConfig = {
                apiKey: "AIzaSyBmH762_RXI9i8fgn4yoRR8cyPZa3kjxWQ",
                authDomain: "fire425837619.firebaseapp.com",
                projectId: "fire425837619",
                storageBucket: "fire425837619.appspot.com",
                messagingSenderId: "850063422052",
                appId: "1:850063422052:web:8584219cfc4aaaf35ca571",
                measurementId: "G-EWSKRNHETK"
            };

            firebase.initializeApp(firebaseConfig);
            const messaging = firebase.messaging();
            console.log(messaging);
            messaging.requestPermission().then(() => {
                console.log('Notification permission granted.');

                getToken();
            }).catch((err) => {
                console.error('Unable to get permission to notify.', err);
            });

            function getToken() {
                messaging.getToken().then((currentToken) => {
                    if (currentToken) {
                        console.log('FCM Token:', currentToken);
                        sendTokenToServer(currentToken);
                    } else {
                        console.log('No registration token available. Request permission to generate one.');
                    }
                }).catch((err) => {
                    console.error('An error occurred while retrieving token.', err);
                });
            }


            function isTokenSentToServer() {
                // Implement your logic to check if token is already sent to server
                return false;
            }

            function sendTokenToServer(token) {
                const userId = $("#userId").val(); // Get the user ID from the hidden input field

                const payload = {
                    userId: userId,
                    token: token
                };

                // Make AJAX request to server
                $.ajax({
                    url: "/Account/SaveToken",
                    type: "POST",
                    contentType: "application/json",
                    data: JSON.stringify(payload),
                    success: function (response) {
                        // Handle success response from server
                        console.log("Token saved successfully:", response);
                    },
                    error: function (xhr, status, error) {
                        // Handle error response from server
                        console.error("Error saving token to server:", error);
                    }
                });
            }

        });

    </script>


    @*     <script src="~/lib/microsoft/signalr/dist/browser/signalr.min.js"></script>
    <script src="~/js/notification.js"></script> *@

    @await RenderSectionAsync("Scripts", required: false)
</body>
</html>


@*
import { initializeApp } from "firebase/app";
import { getMessaging, getToken } from "firebase/messaging";
import { saveNotificationToken } from "../constants/Api";

//--------GET TOKEN FROM LOCAL STORAGE---------
const jwt = localStorage.getItem("token");

// -------------Initialize Firebase----------------
const firebaseConfig = {
  apiKey: "AIzaSyDC1ecgHuzmN2RxDyQcsHZRDSnSAaqVU0w",
  authDomain: "horizon-residence.firebaseapp.com",
  projectId: "horizon-residence",
  storageBucket: "horizon-residence.appspot.com",
  messagingSenderId: "740497421368",
  appId: "1:740497421368:web:4abea47c8416290d64a2cd",
  measurementId: "G-31KNRS5J5F",
};

const firebaseApp = initializeApp(firebaseConfig);
const messaging = getMessaging(firebaseApp);

const setupNotifications = async (message) => {
  try {
    const permission = await Notification.requestPermission();
    if (permission === "granted" && jwt) {
      console.log("Notification permission granted.");

      // Get the FCM token
      console.log(message, "Message");
      const token = await getToken(messaging);
      const data = { notification_token: token, device_type: "WEB" };
      saveNotificationToken(data, jwt)
        .then((res) => console.log(res.message))
        .catch((err) => console.log(err.response));
      console.log("FCM Token:", token);
    } else {
      console.log("Notification permission denied.");
    }
  } catch (error) {
    console.log(error);
  }
}; *@